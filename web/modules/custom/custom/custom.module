<?php

function custom_views_api() {
  return array(
      'api' => 3,
  );
}

/**
 * Implements hook_form_alter
 */
function custom_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
  //print_r($form);
  unset($form['fld_title']['#title']);
  if (!empty($form['fld_title']['#markup'])) {
    $form['fld_title']['#markup'] = '<div class="page-mailed"><strong>' . t('Page to be mailed: ') . '</strong>' . $form['fld_title']['#markup'] . '</div>';
  }
  switch ($form_id) {
    //alter the None option in form node/add/publication for programs field. 
    case 'publication_node_form':
      if (isset($form['field_publication_program']['und']['#options']['_none'])) {
        $form['field_publication_program']['und']['#options']['_none'] = 'All Programs';
      }
      break;
    //alter the None option in form node/add/news for programs field. 
    case 'news_node_form':
      if (isset($form['field_news_program']['und']['#options']['_none'])) {
        $form['field_news_program']['und']['#options']['_none'] = 'All Programs';
      }
      break;
  }
  if ($form['#id'] == 'views-exposed-form-pgdi-content-pgdi-display'){
    foreach ($form['secondary']['dynamic-field'] as $key => $dynamic_field){
      if(is_numeric($key)){
        $form['secondary']['dynamic-field'][$key]['check']['#title'] = $dynamic_field['title']['#markup'];
        $form['secondary']['dynamic-field'][$key]['title']['#access'] = FALSE;
      }
      switch ($key) {
        case 0:
          $form['secondary']['dynamic-field'][$key]['#prefix'] = '<div class="pgdi-column">';
          break;
        case 5:
          $form['secondary']['dynamic-field'][$key]['#suffix'] = '</div>';
          break;
        case 6:
          $form['secondary']['dynamic-field'][$key]['#prefix'] = '<div class="pgdi-column">';
          break;
        case 10:
          $form['secondary']['dynamic-field'][$key]['#suffix'] = '</div>';
          break;
        case 11:
          $form['secondary']['dynamic-field'][$key]['#prefix'] = '<div class="pgdi-column">';
          break;
        case 16:
          $form['secondary']['dynamic-field'][$key]['#suffix'] = '</div>';
          break;
        case 17:
          $form['secondary']['dynamic-field'][$key]['#prefix'] = '<div class="pgdi-column">';
          break;
        case 23:
          $form['secondary']['dynamic-field'][$key]['#suffix'] = '</div>';
          break;
        case 24:
          $form['secondary']['dynamic-field'][$key]['#prefix'] = '<div class="pgdi-column">';
          break;
        case 30:
          $form['secondary']['dynamic-field'][$key]['#suffix'] = '</div>';
          break;
        case 31:
          $form['secondary']['dynamic-field'][$key]['#prefix'] = '<div class="pgdi-column">';
          break;
        case 35:
          $form['secondary']['dynamic-field'][$key]['#suffix'] = '</div>';
          break;
        case 36:
          $form['secondary']['dynamic-field'][$key]['#prefix'] = '<div class="pgdi-column">';
          break;
        case 41:
          $form['secondary']['dynamic-field'][$key]['#suffix'] = '</div>';
          break;
        case 42:
          $form['secondary']['dynamic-field'][$key]['#prefix'] = '<div class="pgdi-column">';
          break;
        case 44:
          $form['secondary']['dynamic-field'][$key]['#suffix'] = '</div>';
          break;
      }
    }
    $form['secondary']['dynamic-field']['#theme'] = '';
  }
}

/**
 * Implementation of hook_init()
 */
function custom_init() {
  $plugin = context_get_plugin('conditions', 'status');
  if ($plugin) {
    $plugin->execute();
  }
}

/**
 * Implements hook_context_plugins().
 *
 */
function custom_context_plugins() {
  $plugins = array();
  $plugins['custom_context_condition_status'] = array(
      'handler' => array(
          'path' => drupal_get_path('module', 'custom'),
          'file' => 'custom_context_condition_status.inc',
          'class' => 'custom_context_condition_status',
          'parent' => 'context_condition',
      ),
  );

  return $plugins;
}

/**
 * Implements hook_context_registry().
 *
 */
function custom_context_registry() {
  return array(
      'conditions' => array(
          'status' => array(
              'title' => t('Status field'),
              'description' => t('Set this context based on the value of Status field.'),
              'plugin' => 'custom_context_condition_status',
          ),
      ),
  );
}

/**
 * Implementation of hook_views_pre_view().
 */
function custom_views_pre_view(&$view, &$display_id, &$args) {
  if (($view->name == 'news_and_publications') && ($display_id == 'block_2')) {
    $customargs = get_nodes_of_type('programs');
    //print $customargs;
    $args[0] = $customargs;
  }
  if (($view->name == 'news_and_publications') && ($display_id == 'block_4')) {
    $customargs = get_nodes_of_type('programs');
    //print $customargs;
    $args[0] = $customargs;
  }
  if (($view->name == 'news_and_publications') && ($display_id == 'block_5')) {
    $customargs = get_nodes_of_type('programs');
    //print $customargs;
    $args[0] = $customargs;
  }
  if (($view->name == 'publications') && ($display_id == 'page_3')) {
    if(!empty($_REQUEST)) {
      $_SESSION['views'][$view->name][$view->current_display]['items_per_page'] = isset($_POST['items_per_page']) ? $_POST['items_per_page'] : 10;
      $items_per_page = $_SESSION['views'][$view->name][$view->current_display]['items_per_page'];
      $view->set_items_per_page($items_per_page);
    }
  }
}

/**
 * Return a list of nodes by their content type.
 *
 * @param  String
 *   $content_type The name of a content type.
 * @return Array
 *   A collection of nodes.
 */
function get_nodes_of_type($content_type) {

  $efq = new EntityFieldQuery();

  $result = $efq
          ->entityCondition('entity_type', 'node', '=')
          ->entityCondition('bundle', $content_type)
          ->execute();

  if (isset($result['node'])) {
    $program_nodes = array_keys($result['node']);
    $program_nids = '';
    $key = 0;
    foreach ($program_nodes as $programs) {
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        if ($programs == arg(1)) {
          unset($program_nodes[$key]);
        }
        $key++;
      }
    }
    $program_nids = implode('+', $program_nodes);
    return $program_nids;
  }
}

/**
 * Implements hook_form_FORMID_alter
 */
function custom_form_views_ui_config_item_form_alter(&$form, &$form_state, $form_id) {
  $form['options']['content']['#wysiwyg'] = TRUE;
}

/**
 * Alter the query before executing the query.
 *
 * 
 * @param $view
 *   The view object about to be processed.
 * @param $query
 *   An object describing the query.
 * @see hook_views_query_substitutions()
 */
function custom_views_query_alter(&$view, &$query) {

  // this is the name of our View and Display
  if ($view->name == 'news_and_publications' && $view->current_display == 'featured_news_publications') {
    // override the ordering
    // this is because the two different date fields are one or the other
    // but not both fields, so we coalesce.
    $query->orderby = array(
        array(
            'field' => 'COALESCE( field_data_field_publication_date_field_publication_date_val, field_data_field_news_date_field_news_date_value)',
            'direction' => 'DESC',
        )
    );
  }
  if ($view->name == 'news_and_publications' && $view->current_display == 'block_2') {
    // override the ordering
    // this is because the two different date fields are one or the other
    // but not both fields, so we coalesce.
    $query->orderby = array(
        array(
            'field' => 'COALESCE( field_data_field_publication_date_field_publication_date_val, field_data_field_news_date_field_news_date_value)',
            'direction' => 'DESC',
        )
    );
    //$query->where[0]['type'] = 'OR';
    //$query->where[0]['conditions'][0]['value'][':field_data_field_news_program_field_news_program_target_id'] = $query->where[0]['conditions'][1]['value'][':field_data_field_publication_program_field_publication_program_target_id'];
  }
  if ($view->name == 'news_and_publications' && $view->current_display == 'block_4') {
    // override the ordering
    // this is because the two different date fields are one or the other
    // but not both fields, so we coalesce.
    $query->orderby = array(
        array(
            'field' => 'COALESCE( field_data_field_publication_date_field_publication_date_val, field_data_field_news_date_field_news_date_value)',
            'direction' => 'DESC',
        )
    );
    //$query->where[0]['type'] = 'OR';
    //$query->where[0]['conditions'][0]['value'][':field_data_field_news_program_field_news_program_target_id'] = $query->where[0]['conditions'][1]['value'][':field_data_field_publication_program_field_publication_program_target_id'];
  }
  if ($view->name == 'news_and_publications' && $view->current_display == 'block_5') {
    // override the ordering
    // this is because the two different date fields are one or the other
    // but not both fields, so we coalesce.
    $query->orderby = array(
        array(
            'field' => 'COALESCE( field_data_field_publication_date_field_publication_date_val, field_data_field_news_date_field_news_date_value)',
            'direction' => 'DESC',
        )
    );
    //$query->where[0]['type'] = 'OR';
    //$query->where[0]['conditions'][0]['value'][':field_data_field_news_program_field_news_program_target_id'] = $query->where[0]['conditions'][1]['value'][':field_data_field_publication_program_field_publication_program_target_id'];
  }
  if ($view->name == 'news_and_publications' && $view->current_display == 'not_ctd2') {
    // override the ordering
    // this is because the two different date fields are one or the other
    // but not both fields, so we coalesce.
    $query->orderby = array(
        array(
            'field' => 'COALESCE( field_data_field_publication_date_field_publication_date_val, field_data_field_news_date_field_news_date_value)',
            'direction' => 'DESC',
        )
    );
    //$query->where[0]['type'] = 'OR';
    //$query->where[0]['conditions'][0]['value'][':field_data_field_news_program_field_news_program_target_id'] = $query->where[0]['conditions'][1]['value'][':field_data_field_publication_program_field_publication_program_target_id'];
  }
  if ($view->name == 'publications' && $view->current_display == 'featured_news_publications') {
    // override the ordering
    // this is because the two different date fields are one or the other
    // but not both fields, so we coalesce.
    $query->orderby = array(
        array(
            'field' => 'COALESCE( field_data_field_publication_date_field_publication_date_val, field_data_field_news_date_field_news_date_value)',
            'direction' => 'DESC',
        )
    );
  }
  if ($view->name == 'publications' && $view->current_display == 'homepage_news_publications') {
    // override the ordering
    // this is because the two different date fields are one or the other
    // but not both fields, so we coalesce.
    $query->orderby = array(
        array(
            'field' => 'COALESCE( field_data_field_publication_date_field_publication_date_val, field_data_field_news_date_field_news_date_value)',
            'direction' => 'DESC',
        )
    );
  }
  if ($view->name == 'publications' && $view->current_display == 'page_3') {
    $items_per_page = $_SESSION['views'][$view->name][$view->current_display]['items_per_page'];
    $view->set_items_per_page($items_per_page);
  }
}

function custom_views_pre_render(&$view) {
  // only execute code on 'analytical_tools page display'
  if ($view->name == 'analytical_tools' && $view->current_display == 'page') {
    
    $view->field['title_1']->field_alias = 'node_title_upper';

    // loop through each node, and assign an uppercased node title to the 'node_title_upper' datamember
    foreach ($view->result as $result) {
      $result->node_title_upper = strtoupper($result->node_title);
    }
  }
  if ($view->name == 'news_and_publications' && $view->current_display == 'block_5') {
    //Load views_2
    $view2 = views_get_view('news_and_publications'); //View Name
    $view2->preview('not_ctd2'); //View Display

    //Check for empty results
    if(empty($view2->result)){
      return;
    }

    $view->result = array_merge($view->result, $view2->result);
  }
  if ($view->name == 'github_issues' && $view->current_display == 'dashboard') {
    //Load views_2
    $view2 = views_get_view('github_issues'); //View Name
    $view2->preview('block_1'); //View Display
    $view3 = views_get_view('github_issues'); //View Name
    $view3->preview('block_2'); //View Display
    $view4 = views_get_view('github_issues'); //View Name
    $view4->preview('block_3'); //View Display

    //Check for empty results
    if(empty($view2->result)){
      return;
    }

    $view->result = array_merge($view->result, $view2->result, $view3->result, $view4->result);
  }
  if ($view->name == 'github_issues' && $view->current_display == 'views_data_export_1') {
    //Load views_2
    $view2 = views_get_view('github_issues'); //View Name
    $view2->preview('views_data_export_2'); //View Display
    $view3 = views_get_view('github_issues'); //View Name
    $view3->preview('views_data_export_3'); //View Display
    $view4 = views_get_view('github_issues'); //View Name
    $view4->preview('views_data_export_4'); //View Display
    //Check for empty results
    if(empty($view2->result)){
      return;
    }

    $view->result = array_merge($view->result, $view2->result, $view3->result, $view4->result);
  }

}

function custom_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-cgci-data-matrix-cgci-small-screen') {
    $options = array('' => '<select>');
    $query = new EntityFieldQuery();
    
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'disease')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->addMetaData('account', \Drupal::entityTypeManager()->getStorage('user')->load(1)); // Run the query as user 1.

    $result = $query->execute();
    $nodes = $result['node'];
    foreach($nodes as $nid) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid->nid);
      $value = $node->title;
      $options[$value] = $value;
    }
    
    $form['title']['#type'] = 'select';
    $form['title']['#options'] = $options;
    $form['title']['#size'] = 1;
    
  }
  
  if ($form['#id'] == 'views-exposed-form-cgci-data-matrix-target-small-screen') {
    $options = array('' => '<select>');
    $query = new EntityFieldQuery();
    
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'target_data_matrix')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->addMetaData('account', \Drupal::entityTypeManager()->getStorage('user')->load(1)); // Run the query as user 1.

    $result = $query->execute();
    $nodes = $result['node'];
    foreach($nodes as $nid) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid->nid);
      $value = $node->title;
      $options[$value] = $value;
    }
    
    $form['title']['#type'] = 'select';
    $form['title']['#options'] = $options;
    $form['title']['#size'] = 1;
    
  }
  
}

/**
 * Alter the menu tree and its configuration before the tree is rendered.
 *
 * @param $tree
 *   An array containing the unrendered menu tree.
 * @param $config
 *   An array containing the configuration of the tree.
 */
function custom_menu_block_tree_alter(&$tree, &$config) {
  if ($config['admin_title'] == 'Footer Main Menu') {
    foreach ($tree as $branch_key => $branch) {
      foreach ($branch as $key => $leaf) {
        if ($key == 'link') {
          if ($leaf['link_title'] == 'Data') {
            unset($tree[$branch_key]);
          }
        }
      }
    }
  }
}